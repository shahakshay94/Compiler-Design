class InheritedUtility{
};

// Multiple declaration of class
class InheritedUtility{
};


// Should through error for NotDefinedClass
// 4.2.9 undeclared function: call to a function that is not declared (free function or member function)
class Utility:InheritedUtility,NotDefinedClass{
    integer var1;
    integer getMax();
};

integer Utility:: getMax(){
    integer var2;
    var2 = 5;
    return (var2);
};
integer getMin(integer a[3],integer b){
    integer var2;
    var2 = 5;
    return (var2);
};

float randomize(){
 integer value;
 value = 1>2;
 return (value);};


main {
    Utility utility;
    integer var3[3];

	// 4.2.7 forward referencing, using identifier before declaration is invalid
	// max = 7;
    integer max;

    // 4.2.12 multiply declared variable: an identifier cannot be declared twice in the same scope.
    integer max;

    Utility myUtility[3][4];

    // 4.2.6 the “.” Operator should be used only on variables of a class type.
    // Error: The . operator should be used only on variables of a class type. If so, its right operand must be a member of that class
     max.var1 = 5;

    // 4.2.10 undeclared variable: use of a local variable name for which there is no declaration
     max = undefinedVariable;

    // 4.2.11 undeclared data member: reference
    max = utility.undefinedMember;

	// 4.2.3 use of an array variable made using the same number of dimensions
	// as declared in the variable declaration
	var3[3][4][5]  = 5;
	
	// 4.2.4 expression used as an index must be of integer type
	var3[3.343 + 23.4] = 9;
	// valid way
	var3[1 - 2 * 3] = 10; 

    // valid way
     myUtility[3][4].var1 = 5;

     // 4.2.9 undeclared function: call to a function that is not declared (free function or member function)
     max = undeclaredFunctionCall();


     // 4.2.2 checking of type and number of parameters upon a function call
     // wrong usage
     max = getMin(var3[3],var3[3]);

     // Num of params
     max = getMin(var3,var3,var3[3]);

     // correct usage match parameters
     max = getMin(var3,var3[3]);

};